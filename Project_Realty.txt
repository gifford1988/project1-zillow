{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import dependencies\n",
    "from RealtyModule import Get_Zillow_Data, Get_Homes\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "zkey = 'X1-ZWz1hey97qto23_4lr3d'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Get Homes Done!\n"
     ]
    }
   ],
   "source": [
    "#get list of homes (be patient!)\n",
    "homes = Get_Homes('atlanta-ga')\n",
    "print(\"Get Homes Done!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Address': '5524 Stone Cove Dr SW, Atlanta, GA', 'Zip Code': '30331', 'Asking Price': '$317,000'}\n",
      "{'Address': '3085 Eastbrook Ter SW, Atlanta, GA', 'Zip Code': '30331', 'Asking Price': '$349,900'}\n",
      "{'Address': '229 Woodward Ave SE, Atlanta, GA', 'Zip Code': '30312', 'Asking Price': '$487,900'}\n",
      "{'Address': '3300 Ferncliff Ln, Atlanta, GA', 'Zip Code': '30324', 'Asking Price': '$527,900'}\n",
      "{'Address': '485 Hillside Dr NW, Atlanta, GA', 'Zip Code': '30342', 'Asking Price': '$1,250,000'}\n",
      "5524 Stone Cove Dr SW, Atlanta, GA\n",
      "$317,000\n",
      "{'Zillow ID': '82618618', 'Zestimate': '312517', 'Lot Size': '14374', 'Square Feet': '5002', 'Bedrooms': '6', 'Bathrooms': '4.0', 'Year Built': '2007', 'Home Type': 'SingleFamily', 'Listing Link': 'http://www.zillow.com/homedetails/5524-Stone-Cove-Dr-SW-Atlanta-GA-30331/82618618_zpid/'}\n"
     ]
    }
   ],
   "source": [
    "#print first 5 homes in list\n",
    "n=0\n",
    "for home in homes:\n",
    "    print(home)\n",
    "    n+=1\n",
    "    if n == 5:\n",
    "        break\n",
    "\n",
    "#get zillow data for first home in list\n",
    "address = homes[0]['Address'] #'5524 Stone Cove Dr SW, Atlanta, GA'\n",
    "zipcode = homes[0]['Zip Code'] #'30331'\n",
    "\n",
    "print(address)\n",
    "print(homes[0]['Asking Price'])\n",
    "ZillowData = Get_Zillow_Data(address, zipcode, zkey)\n",
    "print(ZillowData)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Address</th>\n",
       "      <th>Zip Code</th>\n",
       "      <th>Asking Price</th>\n",
       "      <th>Zestimate</th>\n",
       "      <th>Lot Size</th>\n",
       "      <th>Square Feet</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>Bathrooms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5524 Stone Cove Dr SW, Atlanta, GA</td>\n",
       "      <td>30331</td>\n",
       "      <td>$317,000</td>\n",
       "      <td>312517</td>\n",
       "      <td>14374</td>\n",
       "      <td>5002</td>\n",
       "      <td>6</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3085 Eastbrook Ter SW, Atlanta, GA</td>\n",
       "      <td>30331</td>\n",
       "      <td>$349,900</td>\n",
       "      <td>None</td>\n",
       "      <td>10018</td>\n",
       "      <td>3636</td>\n",
       "      <td>6</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>229 Woodward Ave SE, Atlanta, GA</td>\n",
       "      <td>30312</td>\n",
       "      <td>$487,900</td>\n",
       "      <td>464503</td>\n",
       "      <td>2610</td>\n",
       "      <td>2040</td>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3300 Ferncliff Ln, Atlanta, GA</td>\n",
       "      <td>30324</td>\n",
       "      <td>$527,900</td>\n",
       "      <td>518322</td>\n",
       "      <td>871</td>\n",
       "      <td>1872</td>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>485 Hillside Dr NW, Atlanta, GA</td>\n",
       "      <td>30342</td>\n",
       "      <td>$1,250,000</td>\n",
       "      <td>1193290</td>\n",
       "      <td>44914</td>\n",
       "      <td>4399</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Address Zip Code Asking Price Zestimate  \\\n",
       "0  5524 Stone Cove Dr SW, Atlanta, GA    30331     $317,000    312517   \n",
       "1  3085 Eastbrook Ter SW, Atlanta, GA    30331     $349,900      None   \n",
       "2    229 Woodward Ave SE, Atlanta, GA    30312     $487,900    464503   \n",
       "3      3300 Ferncliff Ln, Atlanta, GA    30324     $527,900    518322   \n",
       "4     485 Hillside Dr NW, Atlanta, GA    30342   $1,250,000   1193290   \n",
       "\n",
       "  Lot Size Square Feet Bedrooms Bathrooms  \n",
       "0    14374        5002        6       4.0  \n",
       "1    10018        3636        6       4.0  \n",
       "2     2610        2040        4       3.0  \n",
       "3      871        1872        3       4.0  \n",
       "4    44914        4399        5       5.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get zillow data for first 5 in list\n",
    "addresses = []\n",
    "zipcodes =[]\n",
    "prices = []\n",
    "estimates = []\n",
    "sizes = []\n",
    "footages = []\n",
    "rooms = []\n",
    "baths = []\n",
    "n=0\n",
    "for home in homes:\n",
    "    addresses.append(home['Address'])\n",
    "    zipcodes.append(home['Zip Code'])\n",
    "    prices.append(home['Asking Price'])\n",
    "    ZillowData = Get_Zillow_Data(home['Address'], home['Zip Code'], zkey)\n",
    "    estimates.append(ZillowData['Zestimate'])\n",
    "    sizes.append(ZillowData['Lot Size'])\n",
    "    footages.append(ZillowData['Square Feet'])\n",
    "    rooms.append(ZillowData['Bedrooms'])\n",
    "    baths.append(ZillowData['Bathrooms'])\n",
    "    n+=1\n",
    "    if n == 5:\n",
    "        break\n",
    "\n",
    "#Build dataframe\n",
    "HouseHuntersDF = pd.DataFrame({'Address':addresses,\n",
    "                               'Zip Code':zipcodes,\n",
    "                               'Asking Price':prices,\n",
    "                               'Zestimate':estimates,\n",
    "                               'Lot Size':sizes,\n",
    "                               'Square Feet':footages,\n",
    "                               'Bedrooms':rooms,\n",
    "                               'Bathrooms':baths})\n",
    "HouseHuntersDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What city is your ideal home located in?  Atlanta\n",
      "What is your ideal price?  200000\n",
      "What is your ideal lot size?  .74\n"
     ]
    }
   ],
   "source": [
    "home_city = input(\"What city is your ideal home located in? \")\n",
    "home_price = input(\"What is your ideal price? \")\n",
    "home_lot_size = input(\"What is your ideal lot size? \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What is your ideal square footage?  2000\n"
     ]
    }
   ],
   "source": [
    "home_footage = input(\"What is your ideal square footage? \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What is your ideal number of bedrooms?  3\n",
      "What is your ideal number of bathrooms?  3\n",
      "What is your ideal build year?  2000\n",
      "What is your ideal home type?  Single Family\n"
     ]
    }
   ],
   "source": [
    "home_beds = input(\"What is your ideal number of bedrooms? \")\n",
    "home_baths = input(\"What is your ideal number of bathrooms? \")\n",
    "home_year = input(\"What is your ideal build year? \")\n",
    "home_type = input(\"What is your ideal home type? \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List the following categories in order from most important to least important: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Location, Price, Lot Size, Square Footage, Number of Bedrooms, Number of Bathrooms, Build Year, Home Type  Location, Price, Lot Size, Square Footage, Number of Bedrooms, Number of Bathrooms, Build Year, Home Type \n"
     ]
    }
   ],
   "source": [
    "home_beds = int(home_beds)\n",
    "print(\"List the following categories in order from most important to least important: \")\n",
    "\n",
    "order_of_importance = input(\"Location, Price, Lot Size, Square Footage, Number of Bedrooms, Number of Bathrooms, Build Year, Home Type \")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(order_of_importance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      0\n",
      "0              Location\n",
      "1                 Price\n",
      "2              Lot Size\n",
      "3        Square Footage\n",
      "4    Number of Bedrooms\n",
      "5   Number of Bathrooms\n",
      "6            Build Year\n",
      "7            Home Type \n",
      "8\n",
      "[1 2 3 4 5 6 7 8]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>Preference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Location</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Price</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lot Size</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Square Footage</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Number of Bedrooms</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Number of Bathrooms</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Build Year</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Home Type</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      0  Preference\n",
       "0              Location           1\n",
       "1                 Price           2\n",
       "2              Lot Size           3\n",
       "3        Square Footage           4\n",
       "4    Number of Bedrooms           5\n",
       "5   Number of Bathrooms           6\n",
       "6            Build Year           7\n",
       "7            Home Type            8"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "order_of_importance_l = order_of_importance.split(\",\")\n",
    "order_df = pd.DataFrame(order_of_importance_l)\n",
    "\n",
    "print(order_df)\n",
    "\n",
    "preference_l = np.arange(1,len(order_of_importance_l)+1,1)\n",
    "print(len(order_of_importance_l))\n",
    "print(preference_l)\n",
    "order_df[\"Preference\"] = preference_l\n",
    "\n",
    "order_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'{row}'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2889\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2890\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2891\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: '{row}'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-b3a28c5c2c97>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0morder_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mHouseHuntersDF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mHouseHuntersDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'{row}'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m>=\u001b[0m\u001b[0mhome_beds\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2973\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2974\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2975\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2976\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2977\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2890\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2891\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2892\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2893\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2894\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: '{row}'"
     ]
    }
   ],
   "source": [
    "for row in order_df[0]:\n",
    "    HouseHuntersDF.loc[HouseHuntersDF['Bedrooms'].astype(int)>=home_beds]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HouseHuntersDF.loc[HouseHuntersDF['Bedrooms'].astype(int)>=home_beds]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
